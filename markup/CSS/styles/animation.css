/* animation
    - 여러 CSS를 유저의 동작과 관계없이 변경
    - @keyframe
    - 키프레임을 만들어놓고 가져다 쓰는 것이 animatio
    -
*/
/* @keyframe
    - 개발자가 중간중간의 특정 지점들을 거칠 수 있는
    키프레임들을 설정함으로써 CSS 애니메이션 과정의 주안 절차를
    제어할 수 있다.
    - @keyframes 이름{
        0%{내용: ;}
        30%{내용: ;}
        60%{내용: ;}
        100%{내용: ;}
        또는
        from{}
        to{}        
    } 
    - hover에 넣으면 그때 적용
*/
/* .box{
    width: 100px;
    height: 100px;
    border: 10px solid seagreen;
    background-color: rgb(204,253,225);
    border-radius: 30px;

}
.box:hover{

    animation: my-first-animation 2s infinite;
}


@keyframes my-first-animation{
    0%{
        font-size: 20px;

    }
    50%{
        width: 300px;
        font-size: 80px;
    }
    100%{
        font-size: 20px;
    }
} */


/* animation-name animation-duration
    - name은 transition의 property에 대응
    - 대소문자를 구분 a~z 0~9 _ - 만 사용가능
    - 
   animation-duration
    - 한 사이클을 완료하는데 걸리는 시간
    - ms s 사용 소수점 가능
*/


/* animation-delay animation-timing-fuction
    delay
        - 시작 후 지연시간 설정
        - s ms 사용
        - 음수값 지정시 바로 재생되고 시점이
        애니메이션의 중간
    timing-function
        - linear ease 등
        - cubic-bezier
*/
/* div{
    width: 100px;
    height: 100px;
    border: 10px solid seagreen;
    animation: my-first-animation 1s infinite;
    
    border-radius: 30px;

}
.box1{
    background-color: rgb(204,253,225);
    animation-delay: -0.3s;
}
.box2{
    background-color: rgb(253, 208, 204);
    animation-delay: 0;
}
.box3{
    background-color: rgb(204, 219, 253);
    animation-delay: 0.3s;
}

@keyframes my-first-animation{
    0%{
        font-size: 20px;

    }
    50%{
        width: 300px;
        font-size: 40px;
    }
    100%{
        font-size: 20px;
    }
} */


/* animation-iteration-count
    - 반복횟수
    - number 소수입력가능
    - infinite
*/
/* animation-direction
    - 정방향 재생 역방향 재생 선택가능
    - normal reverse alternate alternate-reverse
    - 
*/
/* div{
    width: 100px;
    height: 100px;
    border: 10px solid seagreen;
    animation: my-first-animation 1s;
    
    border-radius: 50%;
    background-color: aquamarine;
}

.box1{
    animation-name: rotate;
    animation-duration: 3s;
    animation-iteration-count: infinite;
    animation-timing-function: linear;
    animation-direction: alternate-reverse;
}

@keyframes rotate{
    from{
        transform: rotate(0);
    }
    to{
        transform: rotate(360deg);
    }
} */


/* animation-play-state
    - running paused
    - 기본값은 running
    - paused 에서 일시정지
*/
/* div{
    width: 100px;
    height: 100px;
    border: 10px solid seagreen;
    animation: my-first-animation 1s;
    
    border-radius: 50%;
    background-color: aquamarine;
}

.box1{
    animation-name: rotate;
    animation-duration: 3s;
    animation-iteration-count: infinite;
    animation-timing-function: linear;
    animation-direction: alternate-reverse;
    animation-play-state: paused;
}

.box1:hover{
    animation-play-state: running;
}

@keyframes rotate{
    from{
        transform: rotate(0);
    }
    to{
        transform: rotate(360deg);
    }
} */


/* animation-fill-mode
    - 에니메이션 실행 전과 후에 대상에 스타일을 적용하는 방법 지정
    - none forwards backwards both
    - none 애니메이션이 샐행되지 않을때 스타일을 적용하지 않음
    - forwards 애니메이션이 끝난 모습을 유지
    - backwards 첫번째 keyframe에 정의된 값을 적용
    - both 둘다 적용
    - 원래 재생순서
    - 1.기존스타일 2.첫번째프레임 3. 진행중프레임
    4. 마지막 프레임 5. 기존스타일
*/

/* div{
    width: 100px;
    height: 100px;
    border: 10px solid green;
}

.box1{
    background-color: greenyellow;
    animation: fill-mode 3s linear 1s;
    animation-fill-mode: both;
}

@keyframes fill-mode {
    0%{
        background-color: red;
    }
    50%{
        width: 200px;
    }
    100%{
        background-color: black;
    }
} */


/* animation 단축속성
    - delay direction duration iterationi-count 
    name play-state timing-fuction fill-mode
    - 기본값: none 0s sase 0s 1 normal none running
    - 작성하지 않으면 initial 값 적용
    - name은 마지막
    - duration delay 순 시간관련 항목
    - 
*/